u128 rotate24pattern =
    (16u8)[ 12, 15, 14, 13, 8, 11, 10, 9, 4, 7, 6, 5, 0, 3, 2, 1 ];

inline
fn shift(reg u128 x, inline int count) -> reg u128 {
    reg u128 r = #VPSLL_4u32(x, count);
    return r;
}

inline
fn rotate(reg u128 x, inline int count) -> reg u128 {
    reg u128 r;
    if (count == 24) {
        r = #VPSHUFB(x, rotate24pattern);
    } else {
        r = shift(x, count);
        count = 32 - count;
        reg u128 a = #VPSRL_4u32(x, count);
        r ^= a;
    }
    return r;
}

/* AVX and AVX instructions don't overwrite their first argument so we can
   have
       x = y + z
   without overwriting y. */
fn sboxv(reg u128 x y z) -> reg u128, reg u128, reg u128 {
    x = rotate(x, 24);
    y = rotate(y, 9);

    reg u128 a = shift(z, 1);
    reg u128 b = y & z;
    reg u128 c = shift(b, 2);
    reg u128 d = x ^ a;
    reg u128 e = d ^ c;

    a = x | z;
    b = shift(a, 1);
    c = y ^ x;
    d = c ^ b;

    a = x & y;
    b = shift(a, 3);
    c = z ^ y;

    x = c ^ b;
    y = d;
    z = e;

    return x, y, z;
}

fn small_swapv(reg u128 x) -> reg u128 {
    x = #VPSHUFD(x, (4u2)[2, 3, 0, 1]);
    return x;
}

fn big_swapv(reg u128 x) -> reg u128 {
    x = #VPSHUFD(x, (4u2)[1, 0, 3, 2]);
    return x;
}

fn gimli_body(reg u128 x y z) -> reg u128, reg u128, reg u128 {
    inline int round;
    for round = 24 downto 0 {
        #inline x, y, z = sboxv(x, y, z);

        if (round % 4 == 0) {
            #inline x = small_swapv(x);
        }

        if (round % 4 == 2) {
            #inline x = big_swapv(x);
        }

        if (round % 4 == 0) {
            reg u32 m = 0x9e377900 + round;
            reg u128 a = (128u)m;
            x ^= a;
        }
    }

    return x, y, z;
}

fn gimliv(reg ptr u32[12] state) -> reg ptr u32[12] {
    reg ptr u128[3] st = state;

    // The compiler introduces six extra assignments.
    #inline st[0], st[1], st[2] = gimli_body(st[0], st[1], st[2]);

    state = st;
    return state;
}
