inline
fn rotate(reg u32 x, inline int bits) -> reg u32 {
    x <<r= bits;
    return x;
}

fn sbox1(reg u32 x y z) -> reg u32 {
    reg u32 b = z;
    b <<= 1;
    reg u32 c = y;
    c &= z;
    c <<= 2;
    reg u32 a = x;
    a ^= b;
    a ^= c;
    return a;
}

fn sbox2(reg u32 x y z) -> reg u32 {
    reg u32 a = y;
    reg u32 b = x;
    b |= z;
    b <<= 1;
    ?{}, a = #XOR_32(a, x);
    a ^= b;
    return a;
}

fn sbox3(reg u32 x y z) -> reg u32 {
    reg u32 a = z;
    reg u32 b = x;
    b &= y;
    b <<= 3;
    a ^= y;
    a ^= b;
    return a;
}

fn sbox(reg ptr u32[12] state, reg u64 column) -> reg ptr u32[12] {

    reg u32 x = state[0 + column];
    x = rotate(x, 24);

    reg u32 y = state[4 + column];
    y = rotate(y, 9);

    reg u32 z = state[8 + column];

    #inline
    reg u32 s1 = sbox1(x, y, z);
    state[8 + column] = s1;

    #inline
    reg u32 s2 = sbox2(x, y, z);
    state[4 + column] = s2;

    #inline
    reg u32 s3 = sbox3(x, y, z);
    state[0 + column] = s3;

    return state;
}

fn small_swap(reg ptr u32[12] state) -> reg ptr u32[12] {
    reg u32 x = state[0];
    reg u32 y = state[1];
    state[0] = y;
    state[1] = x;

    x = state[2];
    y = state[3];
    state[2] = y;
    state[3] = x;

    return state;
}

fn big_swap(reg ptr u32[12] state) -> reg ptr u32[12] {
    reg u32 x = state[0];
    reg u32 y = state[2];
    state[0] = y;
    state[2] = x;

    x = state[1];
    y = state[3];
    state[1] = y;
    state[3] = x;
    return state;
}

/* Sometimes, inlining function calls makes the code go faster. */
fn gimli(reg ptr u32[12] state) -> reg ptr u32[12] {
    inline int round;
    for round = 24 downto 0 {
        inline int column;
        for column = 0 to 4 {
            #inline state = sbox(state, column);
        }

        if (round % 4 == 0) {
            #inline state = small_swap(state);
        }

        if (round % 4 == 2) {
            #inline state = big_swap(state);
        }

        if (round % 4 == 0) {
            state[0] ^= round + 0x9e377900;
        }
    }

    return state;
}
