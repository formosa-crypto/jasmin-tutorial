/* The purpose of this file is to show how to check our program's safety
   Run `jasminc -checksafety -slice=function_name_to_check safety.jazz` for every function
   here and see what the checker says about it.
   See https://github.com/jasmin-lang/jasmin/wiki/Safety-checker for further information.

   Once we run the command we can get either "No Safety Violation" or "Possible Safety Violation"
   message. For each violation, the checker will display the instruction which causes the
   violation and the reason.

    "safety.jazz", line [x]: [cause]
*/

/* *** Possible Safety Violation(s):
   "safety.jazz", line 17 (4-14): is_init x

   * Rel:
   ⊤
*/
export
fn uninitialized() -> reg u64 {
    reg u64 x;
    x = x + 1; // Uninitialized read from x.
    return x;
}

/* *** Possible Safety Violation(s):
   "safety.jazz", line 23 (4-14): y <>64 zero

   Memory ranges:
     mem_x: [0; 0]
     mem_y: [0; 0]

   * Rel:
   {inv_y ≥ 0, inv_x ≥ 0, inv_x ≤ 18446744073709551615, inv_y ≤ 18446744073709551615, mem_x = 0, mem_y = 0}
   mem_x ∊ [0; 0]
   mem_y ∊ [0; 0]
*/
export
fn arithmetic(reg u64 x y) -> reg u64 {
    x = x / y; // y could be zero.
    return x;
}

/* *** Possible Safety Violation(s):
   "safety.jazz", line 30 (4-13): in_bound: s[U64 ((int /* of u64 */) x) ] (length 8 U8)
   "safety.jazz", line 31 (4-13): is_init s[U64 0 ]
     
   Memory ranges:
     mem_x: [0; 0]
     
   * Rel:
   {inv_x ≥ 0, inv_x ≤ 18446744073709551615, mem_x = 0}
   mem_x ∊ [0; 0]
*/
export
fn index(reg u64 x) -> reg u64 {
    stack u64[1] s;
    s[x] = 0; // x could be out of bounds.
    x = s[0]; // s[0] could be uninitialized
    return x;
}

/* *** Possible Safety Violation(s):
   "safety.jazz", line 39 (4) to line 41 (5): termination
  
   Memory ranges:
     mem_n: [0; 0]
     
   * Rel:
   {inv_n ≥ 0, inv_n ≤ 18446744073709551614, mem_n = 0}
   mem_n ∊ [0; 0]
*/
export
fn termination(reg u64 n) -> reg u64 {
    reg u64 i;
    i = 0;
    while (i <= n) { // n could be 2^64-1
        i += 1;
    }
    return i;
}

/* *** No Safety Violation

   Memory ranges:
     mem_p: [0; 8]
     
   * Rel:
   {mem_p ≥ 0, inv_p ≥ 0, inv_p ≤ 18446744073709551615, mem_p ≤ 8}
   mem_p ∊ [0; 8]
   
   * Alignment: p 64;

   This function does not have safety violations but `p` must be 64bit-aligned
*/
export
fn alignment(reg u64 p) {
    [#aligned p] = 0; // p needs to be 64bit-aligned.
}

// Write c to the first n bytes of p.
// Run with -safetyparam 'memset>p;n'.
export
fn memset(reg u64 p, reg u8 c, reg u64 n) {
    reg u64 i;
    i = 0;
    while (i < n) {
        (u8)[p + i] = c; // 0 <= i < n
        i += 1;
    }
}
